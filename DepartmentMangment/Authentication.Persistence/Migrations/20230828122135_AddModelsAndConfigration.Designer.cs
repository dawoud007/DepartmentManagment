// <auto-generated />
using System;
using DepartManagment.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DepartManagment.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230828122135_AddModelsAndConfigration")]
    partial class AddModelsAndConfigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DepartManagment.Domain.Entities.ApplicationUser.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("employees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "da0cf3ee-5a56-40ca-8991-62af438c630a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e63d8800-78f8-42b4-ad23-3d508fad39d0",
                            DepartmentId = new Guid("01cf632b-4e64-4e44-9f3c-e55113c02b30"),
                            Email = "Leqaa.Technical@gmail.com",
                            EmailConfirmed = true,
                            Gender = 1,
                            LockoutEnabled = false,
                            Name = "Leqaa",
                            NormalizedEmail = "LEQAA.TECHNICAL@GMAIL.COM",
                            NormalizedUserName = "LEQAA",
                            PasswordHash = "AQAAAAEAACcQAAAAEH4af9FIt81v+vPfXJjUGgkEOJJ9yn4LUvuZPQCk5pgfdLCVITUcm8ZXskmTwvStGg==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "6cfbd3e5-8b30-4b69-b798-c8e916384ecd",
                            TwoFactorEnabled = false,
                            UserName = "Leqaa"
                        });
                });

            modelBuilder.Entity("DepartManagment.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasFilter("[ManagerId] IS NOT NULL");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01cf632b-4e64-4e44-9f3c-e55113c02b30"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "IT Department"
                        });
                });

            modelBuilder.Entity("DepartManagment.Domain.Entities.EmployeeTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeTasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e140533e-538c-4153-9aa6-e9ed7a8d7b58"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Finish the project by the end of the month",
                            IsCompleted = false,
                            Title = "Complete Project X"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("roleclaims", (string)null);
                });

            modelBuilder.Entity("DepartManagment.Domain.Entities.ApplicationUser.Employee", b =>
                {
                    b.HasOne("DepartManagment.Domain.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DepartManagment.Domain.Entities.Department", b =>
                {
                    b.HasOne("DepartManagment.Domain.Entities.ApplicationUser.Employee", "Manager")
                        .WithOne()
                        .HasForeignKey("DepartManagment.Domain.Entities.Department", "ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("DepartManagment.Domain.Entities.EmployeeTask", b =>
                {
                    b.HasOne("DepartManagment.Domain.Entities.ApplicationUser.Employee", "Employee")
                        .WithMany("Tasks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DepartManagment.Domain.Entities.ApplicationUser.Employee", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("DepartManagment.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
